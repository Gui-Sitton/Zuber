tarefa1: Escreva um código para analisar os dados sobre o clima em Chicago em novembro de 2017 no site:
[https://practicum-content.s3.us-west-1.amazonaws.com/data-analyst-eng/moved_chicago_weather_2017.html)
O nome do DataFrame deve ser weather_records e deve ser especificado ao pesquisar: attrs={"id": "weather_records"} . Imprima o DataFrame em sua totalidade.


import pandas as pd
import requests 
from bs4 import BeautifulSoup
URL = 'https://practicum-content.s3.us-west-1.amazonaws.com/data-analyst-eng/moved_chicago_weather_2017.html'
req = requests.get(URL) 
soup = BeautifulSoup(req.text, 'lxml')
table = soup.find('table',attrs={"id": "weather_records"})
colunas=[]
for row in soup.find_all('th'):
    colunas.append(row.text)
conteudo=[]
for row in table.find_all('tr'):
    if not row.find_all('th'):
        conteudo.append([element.text for element in row.find_all('td')])
weather_records = pd.DataFrame(conteudo, columns = colunas)
print(weather_records)



tarefa2: Imprima o campo company_name. Encontre o número de corridas de táxi para cada empresa de táxi de 15 a 16 de novembro de 2017, nomeie o campo resultante como trips_amount e imprima-o também. Classifique os resultados pelo campo trips_amount em ordem decrescente.
SELECT 
	cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM
    cabs
    INNER JOIN trips ON trips.cab_id = cabs.cab_id

WHERE
    CAST(trips.start_ts AS date)BETWEEN '2017-11-15' AND '2017-11-16'
GROUP BY
    company_name
ORDER BY
    trips_amount DESC;



tarefa3: Encontre o número de corridas para cada empresa de táxi cujo nome contém as palavras "Amarelo" ou "Azul" de 1 a 7 de novembro de 2017. Nomeie a variável resultante como trips_amount. Agrupe os resultados pelo campo company_name.
SELECT
    cabs.company_name as company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
    AND cabs.company_name LIKE '%%Yellow%%'
GROUP BY company_name
UNION ALL
SELECT
    cabs.company_name as company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
    AND cabs.company_name LIKE '%%Blue%%'
GROUP BY company_name;


tarefa4:
De 1 a 7 de novembro de 2017, as empresas de táxi mais populares foram Flash Cab e Taxi Affiliation Services. Encontre o número de corridas para essas duas empresas e nomeie a variável resultante como trips_amount. Junte as corridas de todas as outras empresas no grupo "Outros". Agrupe os dados por nomes de empresas de táxi. Nomeie o campo com os nomes das empresas de táxi company. Ordene o resultado em ordem decrescente por trips_amount.
SELECT
    CASE 
        WHEN company_name = 'Flash Cab' THEN 'Flash Cab' 
        WHEN company_name = 'Taxi Affiliation Services' THEN 'Taxi Affiliation Services' 
        ELSE 'Other' 
    END AS company,
    COUNT(trips.trip_id) as trips_amount                
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY 
    company
ORDER BY 
    trips_amount DESC;



tarefa5: Recupere os identificadores dos bairros O'Hare e Loop da tabela neighborhoods.
SELECT
    neighborhood_id,
    name
FROM 
    neighborhoods

WHERE
    name LIKE '%Hare' OR name LIKE 'Loop'



tarefa6: 
Para cada hora, recupere os registros de condições climáticas da tabela weather_records. Usando o operador CASE, divida todas as horas em dois grupos: Bad se o campo descrição contiver as palavras rain ou storm e Good para outros. Nomeie o campo resultante como weather_conditions. A tabela final deve incluir dois campos: data e hora (ts) e weather_conditions.

SELECT
    ts,
    CASE
        WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
        ELSE 'Good'
    END AS weather_conditions
                    
FROM 
    weather_records



tarefa7: Recupere da tabela trips todas as corridas que começaram no Loop (pickup_location_id: 50) em um sábado e terminaram em O'Hare (dropoff_location_id: 63). Obtenha as condições meteorológicas para cada corrida. Use o método que você aplicou na tarefa anterior. Além disso, recupere a duração de cada corrida. Ignore corridas para as quais os dados sobre as condições meteorológicas não estão disponíveis.
As colunas da tabela devem estar na seguinte ordem:
start_ts
weather_conditions
duration_seconds
Ordene por trip_id.


SELECT
    start_ts,
    T.weather_conditions,
    duration_seconds
FROM 
    trips
INNER JOIN (
    SELECT
        ts,
        CASE
            WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
            ELSE 'Good'
        END AS weather_conditions
    FROM 
        weather_records          
) T on T.ts = trips.start_ts
WHERE 
    pickup_location_id = 50 AND dropoff_location_id = 63 AND EXTRACT (DOW from trips.start_ts) = 6
ORDER BY trip_id
