task1: Write a code to analyze the data about the weather in Chicago in November 2017 on the website:
[https://practicum-content.s3.us-west-1.amazonaws.com/data-analyst-eng/moved_chicago_weather_2017.html)
The name of the DataFrame must be weather_records and must be specified when searching: attrs={"id":"weather_records"} . Print the DataFrame in its entirety.


import pandas as pd
import requests 
from bs4 import BeautifulSoup
URL = 'https://practicum-content.s3.us-west-1.amazonaws.com/data-analyst-eng/moved_chicago_weather_2017.html'
req = requests.get(URL) 
soup = BeautifulSoup(req.text, 'lxml')
table = soup.find('table',attrs={"id": "weather_records"})
colunas=[]
for row in soup.find_all('th'):
    colunas.append(row.text)
conteudo=[]
for row in table.find_all('tr'):
    if not row.find_all('th'):
        conteudo.append([element.text for element in row.find_all('td')])
weather_records = pd.DataFrame(conteudo, columns = colunas)
print(weather_records)



task2: Print the company_name field. Find the number of cab rides for each cab company from November 15 to 16, 2017, name the resulting field trips_amount and print it as well. Sort the results by the trips_amount field in descending order.
SELECT 
	cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM
    cabs
    INNER JOIN trips ON trips.cab_id = cabs.cab_id

WHERE
    CAST(trips.start_ts AS date)BETWEEN '2017-11-15' AND '2017-11-16'
GROUP BY
    company_name
ORDER BY
    trips_amount DESC;



task3: Find the number of rides for each cab company whose name contains the words "Yellow" or "Blue" from November 1 to 7, 2017. Name the resulting variable trips_amount. Group the results by the company_name field.
SELECT
    cabs.company_name as company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
    AND cabs.company_name LIKE '%%Yellow%%'
GROUP BY company_name
UNION ALL
SELECT
    cabs.company_name as company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
    AND cabs.company_name LIKE '%%Blue%%'
GROUP BY company_name;


task4:
From November 1 to November 7, 2017, the most popular cab companies were Flash Cab and Taxi Affiliation Services. Find the number of rides for these two companies and name the resulting variable trips_amount. Add the rides for all the other companies in the "Others" group. Group the data by cab company names. Name the field with the names of the cab companies. Sort the result in descending order by trips_amount.
SELECT
    CASE 
        WHEN company_name = 'Flash Cab' THEN 'Flash Cab' 
        WHEN company_name = 'Taxi Affiliation Services' THEN 'Taxi Affiliation Services' 
        ELSE 'Other' 
    END AS company,
    COUNT(trips.trip_id) as trips_amount                
FROM 
    cabs
INNER JOIN 
    trips 
ON 
    trips.cab_id = cabs.cab_id
WHERE 
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY 
    company
ORDER BY 
    trips_amount DESC;



task5: Retrieve the identifiers of the O'Hare and Loop neighborhoods from the neighborhoods table.
SELECT
    neighborhood_id,
    name
FROM 
    neighborhoods

WHERE
    name LIKE '%Hare' OR name LIKE 'Loop'



task6: 
For each hour, retrieve the weather condition records from the weather_records table. Using the CASE operator, divide all the hours into two groups: Bad if the description field contains the words rain or storm and Good for others. Name the resulting field weather_conditions. The final table should include two fields: date and time (ts) and weather_conditions.

SELECT
    ts,
    CASE
        WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
        ELSE 'Good'
    END AS weather_conditions
                    
FROM 
    weather_records



task7: Retrieve from the trips table all the races that started at Loop (pickup_location_id: 50) on a Saturday and finished at O'Hare (dropoff_location_id: 63). Get the weather conditions for each race. Use the method you applied in the previous task. Also, retrieve the duration of each race. Ignore races for which weather data is not available.
The columns in the table should be in the following order:
start_ts
weather_conditions
duration_seconds
Ordene por trip_id.


SELECT
    start_ts,
    T.weather_conditions,
    duration_seconds
FROM 
    trips
INNER JOIN (
    SELECT
        ts,
        CASE
            WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
            ELSE 'Good'
        END AS weather_conditions
    FROM 
        weather_records          
) T on T.ts = trips.start_ts
WHERE 
    pickup_location_id = 50 AND dropoff_location_id = 63 AND EXTRACT (DOW from trips.start_ts) = 6
ORDER BY trip_id
